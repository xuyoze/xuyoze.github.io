{"meta":{"title":"程序员的博客","subtitle":"来一个BLOG吧!!","description":"C# Java SpringMVC Python","author":"Yoze","url":"https://xuyoze.github.io"},"pages":[{"title":"all-archives","date":"2018-01-02T01:09:59.967Z","updated":"2018-01-02T01:09:59.967Z","comments":false,"path":"all-archives/index.html","permalink":"https://xuyoze.github.io/all-archives/index.html","excerpt":"","text":""},{"title":"all-categories","date":"2018-01-02T01:09:59.968Z","updated":"2018-01-02T01:09:59.968Z","comments":false,"path":"all-categories/index.html","permalink":"https://xuyoze.github.io/all-categories/index.html","excerpt":"","text":""},{"title":"all-tags","date":"2018-01-02T01:09:59.970Z","updated":"2018-01-02T01:09:59.970Z","comments":false,"path":"all-tags/index.html","permalink":"https://xuyoze.github.io/all-tags/index.html","excerpt":"","text":""}],"posts":[{"title":"在CentOS7上使用Docker部署Jenkins","slug":"Jenkins-With-Docker-Host-On-CentOs7","date":"2018-02-06T09:07:53.000Z","updated":"2018-02-06T11:26:30.788Z","comments":true,"path":"2018/02/06/Jenkins-With-Docker-Host-On-CentOs7/","link":"","permalink":"https://xuyoze.github.io/2018/02/06/Jenkins-With-Docker-Host-On-CentOs7/","excerpt":"在CentOS7上使用Docker部署Jenkins 公司使用了Jenkins进行项目构建,为了熟悉整个流程, 我决定自己搭建一个Jenkins环境练练手. Jenkins是啥Jenkins，之前叫做Hudson，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，包括： 1、持续的软件版本发布/测试项目。 2、监控外部调用执行的工作。","text":"在CentOS7上使用Docker部署Jenkins 公司使用了Jenkins进行项目构建,为了熟悉整个流程, 我决定自己搭建一个Jenkins环境练练手. Jenkins是啥Jenkins，之前叫做Hudson，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，包括： 1、持续的软件版本发布/测试项目。 2、监控外部调用执行的工作。 安装使用Jenkins官网提供的dock版本, 所以我们首先要在centos中安装并配置好docker.着涉及到docker的安装,可以参考网络上相关的教程. 另外dock版的jenkins需要jdk8及以上, 也需要确保已经正确安装.如果一切就绪,我们就可以从dock库中拉取jenkins-blueocean 镜像了. docker pull jenkinsci/blueocean 如果网速不快的话,可能要等一会.如果不发忍受下载过慢.可以尝试修改docker镜像源到国内的第三方服务器.或者直接从国内镜像服务器拉取镜像. 参考Jenkins官网提供的基本教程, 我们只需要输入简单的docker命令即可运行Jenkins, 以下是官网提供的运行命令,同时官网提供了每个参数的详细说明!!docker run \\ -u root \\ --rm \\ -d \\ -p 8080:8080 \\ -p 50000:50000 \\ -v jenkins-data:/var/jenkins_home \\ -v /var/run/docker.sock:/var/run/docker.sock \\ jenkinsci/blueocean 文档中同时存在-d 和 --rm . 但是提示 -d 和 --rm 相互冲突其容器中的/var/jenkins_home 被挂载到了宿主机的 /var/lib/docker/volumes/jenkins-data/_data 目录下. 如果端口8080已经被占用,则需要修改相关端口, 否则命令会执行失败! 如果一切正常,我们可以看到一个运行中的docker容器: 通过使用如下命令查看dock运行相关信息.## 进入Jenkins容器执行命令docker exec -it &lt;容器id&gt; bash## 查看容器输出的日志docker logs &lt;容器id&gt; [-f(滚动的)] 运行,改密接下来我们就可以访问已运行起来的Jenkins页面了. 第一次访问,需要使用Jenkins随机生成的密码.官王中有详细的运行步骤. 也可以根据页面提示,得到Jenkins初始密码. 到此我们就完成了Jenkins的安装, 哇 好傻瓜..","categories":[{"name":"编程","slug":"programming","permalink":"https://xuyoze.github.io/categories/programming/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://xuyoze.github.io/tags/centos/"},{"name":"docker","slug":"docker","permalink":"https://xuyoze.github.io/tags/docker/"},{"name":"jenkins","slug":"jenkins","permalink":"https://xuyoze.github.io/tags/jenkins/"}]},{"title":"一些读书笔记","slug":"reading-summarys","date":"2018-01-11T01:28:04.000Z","updated":"2018-01-12T10:55:13.849Z","comments":true,"path":"2018/01/11/reading-summarys/","link":"","permalink":"https://xuyoze.github.io/2018/01/11/reading-summarys/","excerpt":"一直以来都有这样的说法, 好人终有好报,坏人必遭报应. 但是我们也有另外一种说法:好人不长命,祸害遗千年. 为何??","text":"一直以来都有这样的说法, 好人终有好报,坏人必遭报应. 但是我们也有另外一种说法:好人不长命,祸害遗千年. 为何?? 中国缺少真正的报应系统所谓的报应系统,我觉得是一种必要的恐吓手段.试想一下如果你开车不遵守交通规则,闯红灯之后接下来,随之而来的是保险公司的保费增长的电话,是银行信用调低,等等.那你还会闯红灯吗?是不是在每次在过路口的时候都要更加小心呢. 这就是报应系统应该做的事情. 报应系统说好听点就是征信系统呗. 如果真有这么个系统会怎么样, 如果这样一个系统人人都可用又会怎样?试想一下:我要和你做生意,然而我对你一无所知,那么我就可以到这个系统里查找你的历史信用记录吧! 双方都可有一个初步的合作基础. 那么如果有人要建立这么一个系统,作为普通人你怕吗!! 我擦? 什么你不怕? 大爷你NB, 请收下我的膝盖.. 反正我怕, 至少在我们国家,我怕.. 听听.. 那孙子又在诋毁自己人,真不是玩意.祖宗都不要了.","categories":[{"name":"读书","slug":"reading","permalink":"https://xuyoze.github.io/categories/reading/"}],"tags":[{"name":"note","slug":"note","permalink":"https://xuyoze.github.io/tags/note/"}]},{"title":"Gradle 使用小记","slug":"gradle-starting","date":"2018-01-09T07:10:55.000Z","updated":"2018-01-10T01:27:21.760Z","comments":true,"path":"2018/01/09/gradle-starting/","link":"","permalink":"https://xuyoze.github.io/2018/01/09/gradle-starting/","excerpt":"Maven和Gradle 是Java生态下常用的两个项目构建工具。其中，Maven多用于Java项目构建，而Gradle在Android的世界中被广泛使用， 特别是在Google放弃Eclipse转用AS作为首选IDE之后，Gradle又得到了相当大范围的推广。","text":"Maven和Gradle 是Java生态下常用的两个项目构建工具。其中，Maven多用于Java项目构建，而Gradle在Android的世界中被广泛使用， 特别是在Google放弃Eclipse转用AS作为首选IDE之后，Gradle又得到了相当大范围的推广。 Gradle的安装Window下Gradle安装 前提: 本机已安装JDK 下载 Gradle4.4.1 zip包下载地址 解压到本机磁盘:c:\\gradle 配置本机PATH: 添加C:\\gradle\\gradle-4.4.1\\bin到PATH值 测试:gradle -v-----------------Gradle 4.4.1----------------- Gradle基本概念 项目:指我们的构建产物（比如Jar包）或实施产物（将应用程序部署到生产环境）。一个项目包含一个或多个任务。 任务:指不可分的最小工作单元，执行构建工作（比如编译项目或执行测试）。 每一构建都包含一个或多个项目. Gradle常用命令参考 Gradle实战 用户指南2.0 用户指南2.0 用户指南3.0","categories":[{"name":"编程","slug":"programming","permalink":"https://xuyoze.github.io/categories/programming/"}],"tags":[{"name":"gradle","slug":"gradle","permalink":"https://xuyoze.github.io/tags/gradle/"}]},{"title":"发布JAVA SpringMVC站点到Centos7","slug":"publish-springmvc-to-tomcate-host-on-centos","date":"2018-01-04T08:05:53.000Z","updated":"2018-02-06T11:31:41.453Z","comments":true,"path":"2018/01/04/publish-springmvc-to-tomcate-host-on-centos/","link":"","permalink":"https://xuyoze.github.io/2018/01/04/publish-springmvc-to-tomcate-host-on-centos/","excerpt":"本文主要记录发布SpringMVC站点到 CentOS 7 中的tomcat过程中出现的一些问题. Tomcat 安装官网线下常用的Tomcat版本, 一般现在生产环境机器采用的版本为8.x, 所以使用8.x进行安装.","text":"本文主要记录发布SpringMVC站点到 CentOS 7 中的tomcat过程中出现的一些问题. Tomcat 安装官网线下常用的Tomcat版本, 一般现在生产环境机器采用的版本为8.x, 所以使用8.x进行安装. 下载安装访问Apache Tomcat官网, 找到 tar包地址并复制, # 切换常用目录cd /usr/local/# 下载指定的tomcat版本wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.24/bin/apache-tomcat-8.5.24.tar.gz&gt;&gt;&gt;# 解压tar包tar -zxvf apache-tomcat-8.0.26.tar.gz# 删除原始包rm -rf apache-tomcat-8.0.26.tar.gz.tar.gz# 重命名mv apache-tomcat-8.0.26 tomcat 启动# 启动tomcat/usr/local/tomcat/bin/startup.shUsing CATALINA_BASE: /usr/local/tomcatUsing CATALINA_HOME: /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME: /usr/java/jdk1.8.0_60Using CLASSPATH: /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jarTomcat started. 运行通过以下地址查看tomcat是否运行正常: http://192.168.11.52:8080/ 看到tomcat系统界面，说明安装成功！ 停止# 停止tomcat/usr/local/tomcat/bin/shutdown.sh 常见问题JAVA路径不正确Neither the JAVA_HOME nor the JRE_HOME environment variable is definedAt least one of these environment variable is needed to run this program 则要注意提前设置java路径 在apache-tomcat-8.0.26/bin/setclasspath.sh中添加一下内容export JAVA_HOME=/usr/java/jdk1.8.0_60 export JRE_HOME=/usr/java/jdk1.8.0_60/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 防火墙禁止端口防火墙开放8080端口,增加8080端口到防火墙配置中，执行以下操作： vi /etc/sysconfig/iptables# 增加以下代码-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT 重启防火墙# service iptables restart Tomcat 配置—– 未完 —-","categories":[{"name":"编程","slug":"programming","permalink":"https://xuyoze.github.io/categories/programming/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://xuyoze.github.io/tags/centos/"},{"name":"java","slug":"java","permalink":"https://xuyoze.github.io/tags/java/"},{"name":"springmvc","slug":"springmvc","permalink":"https://xuyoze.github.io/tags/springmvc/"},{"name":"tomcat","slug":"tomcat","permalink":"https://xuyoze.github.io/tags/tomcat/"}]},{"title":"CentOS 安装Nginx步骤","slug":"centos-intall-nginx","date":"2018-01-04T04:20:58.000Z","updated":"2018-01-04T09:15:35.879Z","comments":true,"path":"2018/01/04/centos-intall-nginx/","link":"","permalink":"https://xuyoze.github.io/2018/01/04/centos-intall-nginx/","excerpt":"CentOS 下安装Nginx相关步骤,以及一些常见的错误. 本篇文章内容为转载内容，原文为博客园博主hafiz,查看原文请移步Centos7安装Nginx实战","text":"CentOS 下安装Nginx相关步骤,以及一些常见的错误. 本篇文章内容为转载内容，原文为博客园博主hafiz,查看原文请移步Centos7安装Nginx实战 一、背景最近在写一些自己的项目，用到了nginx，所以自己动手来在Centos7上安装nginx,以下是安装步骤。 二、基本概念以及应用场景1.什么是nginxNginx是一款使用C语言开发的高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。 2.Nginx的应用场景1)、http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。 2)、虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。 3)、反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。 三、安装步骤1.检查并安装所需的依赖软件1).gcc:nginx编译依赖gcc环境yum install gcc-c++ 2).pcre:(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式.yum install -y pcre pcre-devel 3).zlib：该库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip。yum install -y zlib zlib-devel 4).openssl:一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http）.yum install -y openssl openssl-devel 2.下载nginx源码包下载命令：wget http://nginx.org/download/nginx-1.12.0.tar.gz 3.解压缩源码包并进入1).解压缩：tar -zxvf nginx-1.12.0.tar.gz2).进入解压缩后文件夹：cd nginx-1.12.0 4.配置编译参数(可以使用./configure –help查询详细参数)命令：./configure \\--prefix=/usr/local/nginx \\--pid-path=/var/run/nginx/nginx.pid \\--lock-path=/var/lock/nginx.lock \\--error-log-path=/var/log/nginx/error.log \\--http-log-path=/var/log/nginx/access.log \\--with-http_gzip_static_module \\--http-client-body-temp-path=/var/temp/nginx/client \\--http-proxy-temp-path=/var/temp/nginx/proxy \\--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\--http-scgi-temp-path=/var/temp/nginx/scgi 注：安装之前需要手动创建上面指定的nginx文件夹，即/var/temp、/var/temp/nginx、/var/run/nginx/文件夹，否则启动时报错 5.编译并安装make &amp;&amp; make install 可以进入/usr/local/nginx查看文件是否存在conf、sbin、html文件夹，若存在则安装成功 6.启动nginx1).进入安装目录whereis nginx# /usr/local/nginxcd /usr/local/nginx/sbin/ 2).启动./nginx 3).若报错：[emerg] open() &quot;/var/run/nginx/nginx.pid&quot; failed (2: No such file or directory) 需要查看下是不是在/var/run文件夹下不存在nginx文件夹，不存在则新建 4).查看是否启动：ps -ef | grep nginx 如果有master和worker两个进程证明启动成功 注意：执行./nginx启动nginx，这里可以 -c 指定加载的nginx配置文件，如下：./nginx -c /usr/local/nginx/conf/nginx.conf 如果不指定 -c，nginx在启动时默认加载conf/nginx.conf文件，此文件的地址也可以在编译安装nginx时指定./configure的参数(–conf-path= 指向配置文件（nginx.conf）) 7.停止1).暴利kill(不推荐使用)kill -9 processId 2).快速停止cd /usr/local/nginx/sbin &amp;&amp; ./nginx -s stop 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程 3).完整停止(建议使用)cd /usr/local/nginx/sbin &amp;&amp; ./nginx -s quit 此方式停止步骤是待nginx进程处理任务完毕进行停止 8.重启及重新加载配置1.先停止再启动（建议使用）./nginx -s quit &amp;&amp; ./nginx 2.重新加载配置文件./nginx -s reload 9.测试nginx安装成功，启动nginx,即可通过ip地址来访问nginx: 问题汇总CentOS 防火墙 CentOS 7.0默认使用的是firewall作为防火墙，这里改为iptables防火墙步骤。 关闭firewall： systemctl stop firewalld.service #停止firewallsystemctl disable firewalld.service #禁止firewall开机启动firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）systemctl restart firewalld.service #重启firewallfirewall-cmd --query-port=80/tcp #查询端口是否开放firewall-cmd --add-port=80/tcp #开启指定端口 iptables防火墙（这里iptables已经安装，下面进行配置） vi /etc/sysconfig/iptables-config #编辑防火墙配置文件 # sampleconfiguration for iptables service# you can edit thismanually or use system-config-firewall# please do not askus to add additional ports/services to this default configuration*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT[0:0]:OUTPUT ACCEPT[0:0]-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -jACCEPT-A INPUT -i lo -jACCEPT-A INPUT -p tcp -mstate --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -jACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080-j ACCEPT-A INPUT -j REJECT--reject-with icmp-host-prohibited-A FORWARD -jREJECT --reject-with icmp-host-prohibitedCOMMIT :wq! #保存退出 备注：这里使用80和8080端口为例。*部分一般添加到“-A INPUT -p tcp -m state –state NEW -m tcp–dport 22 -j ACCEPT”行的上面或者下面，切记不要添加到最后一行，否则防火墙重启后不生效。 systemctl restart iptables.service #最后重启防火墙使配置生效systemctl enable iptables.service #设置防火墙开机启动","categories":[{"name":"转载","slug":"reprint","permalink":"https://xuyoze.github.io/categories/reprint/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://xuyoze.github.io/tags/centos/"},{"name":"nginx","slug":"nginx","permalink":"https://xuyoze.github.io/tags/nginx/"}]},{"title":"练习使用scrapy框架抓取图虫图片","slug":"using-scrapy","date":"2018-01-01T13:14:58.000Z","updated":"2018-01-04T09:05:52.131Z","comments":true,"path":"2018/01/01/using-scrapy/","link":"","permalink":"https://xuyoze.github.io/2018/01/01/using-scrapy/","excerpt":"元旦假期，天干物燥，寒风刺骨，不宜外出。黄历上好像是这么说的，嗯， 准没错。 所以在家三天不出屋。。。。 以上都是借口，其实就是懒，就是宅 整好在熟悉一把Python的爬虫框架scrapy。这篇文章不是教程， 只是我在练习过程中出现的一些问题的记录， 如果你想学习scray框架的话,请移步其他网站文章.或者直接查看scrapy官方文档.","text":"元旦假期，天干物燥，寒风刺骨，不宜外出。黄历上好像是这么说的，嗯， 准没错。 所以在家三天不出屋。。。。 以上都是借口，其实就是懒，就是宅 整好在熟悉一把Python的爬虫框架scrapy。这篇文章不是教程， 只是我在练习过程中出现的一些问题的记录， 如果你想学习scray框架的话,请移步其他网站文章.或者直接查看scrapy官方文档. 爬取前准备图虫的相关图片都是按照Tag的方式进行组织的, 所以我们很容易就可以根据标签进行某类图片的爬取。下面是图虫的入口页面图虫入口 爬去入口每个标签或专题页面采用的是JS动态翻页,我们可以通过WEB工具的网络功能,或者fidder查看对应的请求.获得如下接口请求地址:https://tuchong.com/rest/tags/%E8%87%AA%E7%84%B6/posts?page=1&amp;count=20&amp;type=hot 可以看到, 有几个可用的参数: tags page count type 由此我们可以得到分页的接口数据如下图所示这个是列表页的基本数据信息 返回的JSON数据中每个post节点下都有一个images数组,如果数组中有对个值表示,这个是一组套图.因此我们可以根据 images 节点,循环并获取相应的套图。 原图地址分析由于列表页是缩放后的图片, 所以我们只能手动查看并归纳原图文件的路径规则.也许哪一天规则就变了也说不上但是目前还是可用的。 规则如下： 缩略图规则 :https://photo.tuchong.com/+ author_id + /g/ + img_id +.jpg 如:https://photo.tuchong.com/1370833/g/20494979.jpgauthor_id 是图片作者的编号,img_id 是图片编号 原图规则 :https://photo.tuchong.com/+ author_id + /f/ + img_id +.jpg 如:https://photo.tuchong.com/1370833/f/20494979.jpgauthor_id 是图片作者的编号,img_id 是图片编号 代码编写创建爬虫# 创建项目scrapy startproject TuchongProj# 进入项目cd TuchongProj# 创建爬虫scrapy genspider tuchong tuchong.com 相关代码编写tuchong.py 演示代码, 代码未实现翻页,只取了一页数据。 class TuchongSpider(scrapy.Spider): name = 'tuchong' allowed_domains = ['tuchong.com'] # 请求URL构造参数 tag = \"风光\" types = \"hot\" # new order = \"weekly\" page = \"1\" count = \"20\" baseUrl = \"https://tuchong.com/rest/tags/\" start_urls = [baseUrl + tag + \"/posts?page=\" + page + \"&amp;count=\" + count + \"&amp;order=\" + order] # 暂时未做分页功能(循环page) def parse(self, response): posts = json.loads(response.body)['postList'] for post in posts: images = post['images'] for img in images: item = TuchongprojItem() author_id = img['user_id'] img_id = img['img_id'] img_link = \"https://photo.tuchong.com/\" + \\ str(author_id) + \"/f/\" + str(img_id) + \".jpg\" item['authorId'] = author_id item['imageId'] = img_id item['imageLink'] = img_link yield item 我在定义的Item有三个字段， 这里只取了接口JSON数据中的author_id和img_id 按照上面的分析的规则,拼装了图片的大图路径。 Item定义：class TuchongprojItem(scrapy.Item): # define the fields for your item here like: authorId = scrapy.Field() imageId = scrapy.Field() imageLink = scrapy.Field() 接下来就是定义pipeline处理相关数据了class TuchongprojPipeline(ImagesPipeline): def get_media_requests(self, item, info): imglink = item['imageLink'] # print(imglink) yield scrapy.Request(imglink) def item_completed(self, result, item, info): # print(result) # [(True, &#123;'url': 'https://photo.tuchong.com/1660246/f/9281459.jpg', 'path': 'full/e8876e7547c166d58876c3fce547d6819d8bf031.jpg', 'checksum': 'd78e6ba1115ae956878bdc630173ea7a'&#125;)] # 取出图片存放的地址 author_id = item['authorId'] img_id = item['imageId'] patharr = [x[\"path\"] for ok, x in result if ok] path = patharr[0] # 文件重命名(原地址,新地址) os.rename(images_store + path, images_store + \"full/\" + str(author_id) + \"-\" + str(img_id) + \".jpg\") return item 由于要处理图片数据,我们使用scrapy提供ImagesPipeline进行图片处理.重写ImagesPipeline里的两个方法:get_media_requests方法, 主要负责发送图片获取请求, 这里我们将我们拼装的图片大图地址传递给Request进行图片处理. item_completed方法, 这里主要用来对下载回来的图片进行重命名处理. 我们的命名规则是 author_id+&#39;-&#39;+img_id, 这样便于我们进行排序 ^_^ 使用ImagesPipeline 我们需要制定图片的存放地址,同时我们需要启用当前pipeline settings.py# Configure item pipelines# See http://scrapy.readthedocs.org/en/latest/topics/item-pipeline.htmlITEM_PIPELINES = &#123; &apos;TuchongProj.pipelines.TuchongprojPipeline&apos;: 300,&#125;# 爬取图片后图片存放的位置IMAGES_STORE = &quot;F:/_tuchong/fengjing/&quot; 好了, 爬虫差不多了,运行下试试吧! scrapy crawl tuchong 相关问题接口请求不成功或返回的数据为空 UserAgent问题.自定义UserAgent,在settings.py修改UA # Crawl responsibly by identifying yourself (and your website) on the user-agentUSER_AGENT = &apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3294.6 Safari/537.36&apos; 请求过快,相应不过来限制并发数,增加延迟时间 # Configure maximum concurrent requests performed by Scrapy (default: 16)CONCURRENT_REQUESTS = 1# Configure a delay for requests for the same website (default: 0)# See http://scrapy.readthedocs.org/en/latest/topics/settings.html#download-delay# See also autothrottle settings and docsDOWNLOAD_DELAY = 5 本机没有图片处理相关库No module named ‘PIL’ 安装Pillow库pip install pillow pillow基本知识 其他自己写爬虫,纯粹就是玩票。我们自己写爬虫，去爬取别人的数据， 尽量将并发降低，不要给站点造成骚扰。如果可以尽量按照爬虫协议来爬取应允的内容。 附 图虫的爬虫协议# Robots.txt file from http://www.tuchong.com# All robots will spider the domainUser-agent: YandexBotDisallow: /User-agent: MJ12botDisallow: /User-agent: PurebotDisallow: /User-agent: psbotDisallow: /User-agent: *Disallow: /admin/Disallow: /api/ 相关学习资料 scrapy文档(CN)","categories":[{"name":"编程","slug":"programming","permalink":"https://xuyoze.github.io/categories/programming/"}],"tags":[{"name":"python","slug":"python","permalink":"https://xuyoze.github.io/tags/python/"},{"name":"scrapy","slug":"scrapy","permalink":"https://xuyoze.github.io/tags/scrapy/"}]},{"title":"写在2017年的最后几天","slug":"the-last-days-of-2017","date":"2017-12-31T04:02:46.000Z","updated":"2018-01-02T01:09:59.955Z","comments":true,"path":"2017/12/31/the-last-days-of-2017/","link":"","permalink":"https://xuyoze.github.io/2017/12/31/the-last-days-of-2017/","excerpt":"转眼又是一年过去，今天是2017的最后一天了，写点东西记录下17年的一些事情。","text":"转眼又是一年过去，今天是2017的最后一天了，写点东西记录下17年的一些事情。 时光匆匆,从来不给人留下后悔的机会. 如果愿意倒是可以在每年的年底来细数下年初的计划，或者说年初的壮志雄心有多少完成了， 有多少没完成，还有多少根本已经就被忘得一干二净了。 hi 马丹，你当年可是做了这些SB决心哦，忘了吧。。卢瑟。。 以上都是扯淡， 因为我是个基本不做计划的人，哈哈。但是我要记录下我的2017都干了啥。 关于跳槽6月份，换了一家新的公司，至于换公司的理由也是和别人一样，说到底是为了钱，说啥为技术，为了理想，为了xxx都是扯淡。作为一个背负了债务的80后房奴，挣钱还债，亚历山大。 这里我也不想吐槽社会对我们这代人的不公，一代都有一代的难处，有啥办法呢！呵呵。。 换家公司继续写代码喽。 玩票17年自学了几门语言，啊， 好几门呢，要不然咋叫玩票呢！！ 据说Golang非常火啊，于是上半年看了一本叫《go web编程》的电子书，还买了一本《Go 程序设计语言》目前该书还在吃灰中。拿beego框架搞了个小玩意。之后就没怎么用过基本的语法都差不多忘光了。哎，感叹时光啊，记性不如以前了。 学习了一个月的Python,基本语法差不多搞清楚了, 然后还用scrapy框架搞了个小爬虫，自然也是玩票性质的，自娱自乐人畜无害。 接着就掉入了java无穷无尽的配置中，为啥这么说呢，写过好多年的C#代码，换到新公司来了新领导，然而新领导的技术倾向性比我这普通程序员还严重， 我也是无Fuck可说。旧的C#项目要求逐步迁移到Java。 不过多吐槽，能力有限无法左右。 也许是中C#的毒太深， 目前仍在适应Java的一些（很多）东西。慢慢来吧。 计划说过了， 我是个没有计划的一类。 种种2017年有一个大会召开了。2017年比特币疯了你知道吗？2017年差点被当成低端人口给清理了，你遇到过吗？2017年有个电影火了你知道是啥吗？2017年有个地方火山爆发了，然后一票媒体集体意淫，有一帮群众疯狂点赞，然后又被批“巨婴”，你可知道？2017年有一其在倭国的凶杀案，牵动了亿万国人的心，你可知晓并评论过？2017年有一批10后的幼儿被无情的伤害了。2017年有一位中年程序员跳楼了。2017年科技界好像跟AI不沾边你就变成了卢瑟。。。。。","categories":[{"name":"生活","slug":"life","permalink":"https://xuyoze.github.io/categories/life/"}],"tags":[{"name":"Jabber","slug":"Jabber","permalink":"https://xuyoze.github.io/tags/Jabber/"}]},{"title":"Git 错误 fatal Pathspec xxx is in submodule","slug":"fatal-Pathspec-xxx-is-in-submodule","date":"2017-12-30T14:19:49.000Z","updated":"2018-01-02T01:09:59.937Z","comments":true,"path":"2017/12/30/fatal-Pathspec-xxx-is-in-submodule/","link":"","permalink":"https://xuyoze.github.io/2017/12/30/fatal-Pathspec-xxx-is-in-submodule/","excerpt":"下午在创建git仓库的时候,有一个文件夹出现了异常,导致上传到 github后只有一个空的文件夹. 而文件夹中无任何文件. 更换机器后,拉取仓储,重新添加文件后试图将文件添加到git报错. fatal: Pathspec &apos;claudia&apos; is in submodule...","text":"下午在创建git仓库的时候,有一个文件夹出现了异常,导致上传到 github后只有一个空的文件夹. 而文件夹中无任何文件. 更换机器后,拉取仓储,重新添加文件后试图将文件添加到git报错. fatal: Pathspec &apos;claudia&apos; is in submodule... 查找网友解决方法,在此记录如下: I have a repository on google code with my project.I use Git source control.It seems that when I try to add files to git from a specific directory, I get the following error:fatal: Pathspec ‘autoload_classmap.php’ is in submodule ‘module/CocktailMakerModule’Now I’m not trying to add a submodule. I’m just trying to add a directory to git!The result that I have now is that this directory is committed empty. So when I try to add specific files I get the above error message.I checked and there isn’t any other .git directory in that directory, so I’m really confused to why this has happened.Best How To :Still no idea how it happened. All documentation I read assumes I have a .git directory there but I don’t.I just did the following:git rm -rf –cached CocktailMakerModule/git add CocktailMakerModule/That seems to resolve the issue. 解决方法: 执行命令从本地仓储删除现有文件夹 git rm -rf --cached claudia/ 添加文件后重新添加到本地仓储 git add claudia/ 问题解决! fatal: Pathspec ‘autoload_classmap.php’ is in submodule ‘module/CocktailMakerModule’ howtobuildsoftware.comfatal: Pathspec...","categories":[{"name":"编程","slug":"programming","permalink":"https://xuyoze.github.io/categories/programming/"}],"tags":[{"name":"git","slug":"git","permalink":"https://xuyoze.github.io/tags/git/"}]},{"title":"目录示例","slug":"topic-demo","date":"2017-12-29T15:30:07.000Z","updated":"2018-01-02T01:09:59.962Z","comments":true,"path":"2017/12/29/topic-demo/","link":"","permalink":"https://xuyoze.github.io/2017/12/29/topic-demo/","excerpt":"这篇文章没有任何意义,只是在联系hexo的一些用法,一记主题的一些配置.使用&lt;!-- excerpt --&gt;表示这里的这一段是引言,在正文中不会再出现.","text":"目录1.1 目录1 列表2.1 目录二 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget urna vitae velit eleifend interdum at ac nisi. In nec ligula lacus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed eu cursus erat, ut dapibus quam. Aliquam eleifend dolor vitae libero pharetra adipiscing. Etiam adipiscing dolor a quam tempor, eu convallis nulla varius. Aliquam sollicitudin risus a porta aliquam. Ut nec velit dolor. Proin eget leo lobortis, aliquam est sed, mollis mauris. Fusce vitae leo pretium massa accumsan condimentum. Fusce malesuada gravida lectus vel vulputate. Donec bibendum porta nibh ut aliquam. Sed lorem felis, congue non fringilla eu, aliquam eu eros. Curabitur orci libero, mollis sed semper vitae, adipiscing in lectus. Aenean non egestas odio. Donec sollicitudin nisi quis lorem gravida, in pharetra mauris fringilla. Duis sit amet faucibus dolor, id aliquam neque. In egestas, odio gravida tempor dictum, mauris felis faucibus purus, sit amet commodo lacus diam vitae est. Ut ut quam eget massa semper sodales. Aenean non ipsum cursus, blandit lectus in, ornare odio. Curabitur ultrices porttitor vulputate.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget urna vitae velit eleifend interdum at ac nisi. In nec ligula lacus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed eu cursus erat, ut dapibus quam. Aliquam eleifend dolor vitae libero pharetra adipiscing. Etiam adipiscing dolor a quam tempor, eu convallis nulla varius. Aliquam sollicitudin risus a porta aliquam. Ut nec velit dolor. Proin eget leo lobortis, aliquam est sed, mollis mauris. Fusce vitae leo pretium massa accumsan condimentum. Fusce malesuada gravida lectus vel vulputate. Donec bibendum porta nibh ut aliquam. Sed lorem felis, congue non fringilla eu, aliquam eu eros. Curabitur orci libero, mollis sed semper vitae, adipiscing in lectus. Aenean non egestas odio. Donec sollicitudin nisi quis lorem gravida, in pharetra mauris fringilla. Duis sit amet faucibus dolor, id aliquam neque. In egestas, odio gravida tempor dictum, mauris felis faucibus purus, sit amet commodo lacus diam vitae est. Ut ut quam eget massa semper sodales. Aenean non ipsum cursus, blandit lectus in, ornare odio. Curabitur ultrices porttitor vulputate.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget urna vitae velit eleifend interdum at ac nisi. In nec ligula lacus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed eu cursus erat, ut dapibus quam. Aliquam eleifend dolor vitae libero pharetra adipiscing. Etiam adipiscing dolor a quam tempor, eu convallis nulla varius. Aliquam sollicitudin risus a porta aliquam. Ut nec velit dolor. Proin eget leo lobortis, aliquam est sed, mollis mauris. Fusce vitae leo pretium massa accumsan condimentum. Fusce malesuada gravida lectus vel vulputate. Donec bibendum porta nibh ut aliquam. Sed lorem felis, congue non fringilla eu, aliquam5 eu eros. Curabitur orci libero, mollis sed semper vitae, adipiscing in lectus. Aenean non egestas odio. Donec sollicitudin nisi quis lorem gravida, in pharetra mauris fringilla. Duis sit amet faucibus dolor, id aliquam neque. In egestas, odio gravida tempor dictum, mauris felis faucibus purus, sit amet commodo lacus diam vitae est. Ut ut quam eget massa semper sodales. Aenean non ipsum cursus, blandit lectus in, ornare odio. Curabitur ultrices porttitor vulputate.","categories":[{"name":"HEXO","slug":"HEXO","permalink":"https://xuyoze.github.io/categories/HEXO/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://xuyoze.github.io/tags/hexo/"}]},{"title":"相册示例","slug":"gallrey-demo","date":"2017-12-29T15:21:04.000Z","updated":"2018-01-02T01:09:59.942Z","comments":true,"path":"2017/12/29/gallrey-demo/","link":"","permalink":"https://xuyoze.github.io/2017/12/29/gallrey-demo/","excerpt":"这篇文章没有任何意义,只是在联系hexo相册的一些用法.","text":"这篇文章没有任何意义,只是在联系hexo相册的一些用法.","categories":[{"name":"HEXO","slug":"HEXO","permalink":"https://xuyoze.github.io/categories/HEXO/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://xuyoze.github.io/tags/hexo/"}]},{"title":"HEXO 中的一些常用方法","slug":"about-hexo","date":"2017-12-29T12:37:26.000Z","updated":"2018-01-11T02:00:11.364Z","comments":true,"path":"2017/12/29/about-hexo/","link":"","permalink":"https://xuyoze.github.io/2017/12/29/about-hexo/","excerpt":"这篇文章没有任何意义,只是在联系hexo的一些用法,一记主题的一些配置.","text":"这篇文章没有任何意义,只是在联系hexo的一些用法,一记主题的一些配置. 关于目录使用关键标签&lt;!-- toc --&gt;,可以在指定的地方自动生成目录. 图片引入 文字高亮&#123;% hl_text [(classes | hexa code | rgb color | rgba color)] %&#125; content&#123;% endhl_text %&#125; Verizon首席网络工程师兼无线网络负责人Nicola Palmern说：“大规模MIMO是4G LTE的重要组成部分，并将在5G技术中发挥重要作用，可以降低数十亿个连接中的单位数延迟以及提高他们的可扩展性。”MIMO，多输入多输出技术（Multiple-Input Multiple-Output）是指在发射端和接收端分别使用多个发射天线和接收天线，使信号通过发射端与接收端的多个天线传送和接收，从而改善通信质量。这项技术现在使用得最多的是家庭Wi-Fi网络，类型通常是2×2或3×3的天线，即用于发送和接收的两个或三个天线。大规模MIMO采用相同的概念，并将其变成一路。## 特殊提示框&#123;% alert [classes] %&#125;content&#123;% endalert %&#125; Verizon没有说明测试使用了多少个天线，但是大规模MIMO通常意味着比现有技术高几个数量级。 Verizon没有说明测试使用了多少个天线，但是大规模MIMO通常意味着比现有技术高几个数量级。 Verizon没有说明测试使用了多少个天线，但是大规模MIMO通常意味着比现有技术高几个数量级。 Verizon没有说明测试使用了多少个天线，但是大规模MIMO通常意味着比现有技术高几个数量级。 Verizon没有说明测试使用了多少个天线，但是大规模MIMO通常意味着比现有技术高几个数量级。 文字引用块 hexo 关于引用块的文档引用块标签 普通引用Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 引用书上的句子Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 引用 TwitterNEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 引用网络上的文章Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 图片标签&#123;% image [classes] [group:group-name] /path/to/image [/path/to/thumbnail] [width of thumbnail] [height of thumbnail] [title text] %&#125; classes: fancybox : Generate a fancybox image. nocaption : Caption of the image will not be displayed. left : Image will float at the left. right : Image will float at the right. center : Image will be at center. fig-20 : Image will take 20% of the width of post width and automatically float at left. fig-25 : Image will take 25% of the width of post width and automatically float at left. fig-33 : Image will take 33% of the width of post width and automatically float at left. fig-50 : Image will take 50% of the width of post width and automatically float at left. fig-75 : Image will take 75% of the width of post width and automatically float at left. fig-100 : Image will take 100% of the width of post width. clear : Add a div with clear:both; style attached after the image to retrieve the normal flow of the post. 左右样式 添加fancybox和groups:[xxx] 来组成相册","categories":[{"name":"编程","slug":"programming","permalink":"https://xuyoze.github.io/categories/programming/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://xuyoze.github.io/tags/hexo/"}]},{"title":"你好世界","slug":"hello","date":"2017-12-28T16:00:00.000Z","updated":"2018-01-02T01:09:59.950Z","comments":true,"path":"2017/12/29/hello/","link":"","permalink":"https://xuyoze.github.io/2017/12/29/hello/","excerpt":"2017年最有一个工作日了!!! 午饭时间准备折腾下githubpage.网上找了些教程,想在我这WIN7的机器上安装个jekyll可是这玩意需要ruby运行环境….","text":"2017年最有一个工作日了!!! 午饭时间准备折腾下githubpage.网上找了些教程,想在我这WIN7的机器上安装个jekyll可是这玩意需要ruby运行环境…. 作为一个码猴, 我的8G破车已经无法再来一个运行环境啦!! Nodejs .Net Java Python Golang … 嗯…, 我装这么多也只是玩票啊…哈哈,但是我真的不想在装一个ruby了… 使用 HEXO 为啥用hexo?? 搜索引擎关键字匹配的, 其实我本来并不知道的.. 官网看了下还不错哦 hexi ,感谢这位台湾的小哥. 另外找了一片普及文章, 照着一步步就搞定了.(画瓢我还是可以的) 接下来就是选个模板啥的, 这些都可以按照hexo官方文档来做. 然后我就码了这个小文… 接着折腾去了 我闪~ 参考文章 官方文档 主题 通过Hexo在Github上搭建博客教程","categories":[],"tags":[{"name":"Jabber","slug":"Jabber","permalink":"https://xuyoze.github.io/tags/Jabber/"}]}]}